// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  trades       Trade[]
  positions    Position[]
  securitiesAccounts SecuritiesAccount[]

  @@map("users")
}

model Stock {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique
  name      String
  market    String
  sector    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stockPrices StockPrice[]
  trades      Trade[]
  positions   Position[]
  predictions Prediction[]

  @@map("stocks")
}

model StockPrice {
  id        Int      @id @default(autoincrement())
  stockId   Int      @map("stock_id")
  price     Float
  volume    Int?
  high      Float?
  low       Float?
  open      Float?
  close     Float?
  timestamp DateTime
  createdAt DateTime @default(now()) @map("created_at")

  stock Stock @relation(fields: [stockId], references: [id])

  @@unique([stockId, timestamp])
  @@map("stock_prices")
}

model Trade {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  stockId     Int      @map("stock_id")
  tradeType   String   @map("trade_type") // BUY or SELL
  quantity    Int
  price       Float
  totalAmount Float  @map("total_amount")
  status      String   @default("PENDING") // PENDING, FILLED, CANCELLED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])

  @@map("trades")
}

model Position {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  stockId         Int      @map("stock_id")
  quantity        Int
  averagePrice    Float  @map("average_price")
  totalInvestment Float  @map("total_investment")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])

  @@map("positions")
}

model Prediction {
  id              Int      @id @default(autoincrement())
  stockId         Int      @map("stock_id")
  predictedPrice  Float  @map("predicted_price")
  confidenceScore Float? @map("confidence_score")
  modelName       String?  @map("model_name")
  predictionDate  DateTime @map("prediction_date")
  createdAt       DateTime @default(now()) @map("created_at")

  stock Stock @relation(fields: [stockId], references: [id])

  @@map("predictions")
}

model SecuritiesAccount {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  brokerName        String   @map("broker_name") // kabuステーションなど
  accountNumber     String   @map("account_number")
  apiPassword       String?  @map("api_password") // 暗号化して保存（kabuステーション用）
  username          String   // ログインID
  passwordHash      String   @map("password_hash") // 暗号化して保存
  isActive          Boolean  @default(true) @map("is_active")
  deviceRegistered  Boolean  @default(false) @map("device_registered")
  lastConnected     DateTime? @map("last_connected")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("securities_accounts")
}

// 投資商品マスタ
model InvestmentProduct {
  id              String   @id @default(cuid())
  symbol          String   @unique
  name            String
  type            String   // STOCK, ETF, MUTUAL_FUND, GOLD, BOND, CRYPTO, COMMODITY
  currentPrice    Float    @map("current_price")
  currency        String   @default("JPY")
  minOrderSize    Float    @map("min_order_size")
  tradingFee      Float    @map("trading_fee")        // 固定手数料
  tradingFeeRate  Float    @map("trading_fee_rate")   // 手数料率（%）
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  positions       InvestmentPosition[]
  transactions    InvestmentTransaction[]
  decisions       AgentDecision[]

  @@map("investment_products")
}

// 投資ポジション
model InvestmentPosition {
  id                  String   @id @default(cuid())
  productId           String   @map("product_id")
  quantity            Float
  averagePrice        Float    @map("average_price")
  currentPrice        Float    @map("current_price")
  totalCost           Float    @map("total_cost")         // 取得総額（手数料込み）
  currentValue        Float    @map("current_value")      // 現在評価額
  unrealizedPnl       Float    @map("unrealized_pnl")     // 未実現損益
  unrealizedPnlPercent Float  @map("unrealized_pnl_percent")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  product InvestmentProduct @relation(fields: [productId], references: [id])

  @@map("investment_positions")
}

// 取引履歴
model InvestmentTransaction {
  id            String   @id @default(cuid())
  productId     String   @map("product_id")
  type          String   // BUY or SELL
  quantity      Float
  price         Float
  fee           Float    // 手数料
  totalAmount   Float    @map("total_amount")  // 総額（手数料込み）
  reason        String   // 取引理由
  confidence    Float    // 信頼度
  createdAt     DateTime @default(now()) @map("created_at")

  product InvestmentProduct @relation(fields: [productId], references: [id])

  @@map("investment_transactions")
}

// エージェント設定
model AgentConfig {
  id                String   @id @default(cuid())
  name              String
  version           String   @default("1.0.0")
  minConfidence     Float    @map("min_confidence")     // 最小信頼度
  maxPositionSize   Float    @map("max_position_size")  // 最大ポジションサイズ
  stopLossPercent   Float    @map("stop_loss_percent")  // ストップロス率
  takeProfitPercent Float    @map("take_profit_percent") // 利確率
  maxDailyTrades    Int      @map("max_daily_trades")   // 1日の最大取引数
  riskTolerance     String   @map("risk_tolerance")     // LOW, MEDIUM, HIGH
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  decisions AgentDecision[]

  @@map("agent_configs")
}

// エージェントの判断記録
model AgentDecision {
  id              String   @id @default(cuid())
  agentId         String   @map("agent_id")
  productId       String   @map("product_id")
  action          String   // BUY, SELL, HOLD
  reason          String
  technicalAnalysis String @map("technical_analysis")  // 技術分析の結果
  riskAnalysis    String   @map("risk_analysis")       // リスク評価
  marketAnalysis  String   @map("market_analysis")     // 市場環境
  confidence      Float    // 信頼度
  expectedReturn  Float    @map("expected_return")     // 期待リターン
  stopLoss        Float?   @map("stop_loss")           // ストップロス価格
  takeProfit      Float?   @map("take_profit")         // 利確価格
  createdAt       DateTime @default(now()) @map("created_at")

  agent   AgentConfig       @relation(fields: [agentId], references: [id])
  product InvestmentProduct @relation(fields: [productId], references: [id])

  @@map("agent_decisions")
}

// 取引戦略
model TradingStrategy {
  id              String   @id @default(cuid())
  name            String
  description     String
  buyConditions   String   @map("buy_conditions")      // JSON配列
  sellConditions  String   @map("sell_conditions")     // JSON配列
  maxDrawdown     Float    @map("max_drawdown")        // 最大ドローダウン
  positionSizing  String   @map("position_sizing")     // ポジションサイジング方法
  diversification Float    // 分散投資率
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("trading_strategies")
}